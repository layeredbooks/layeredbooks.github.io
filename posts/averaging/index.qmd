---
title: "Averaging in discrete time"
author: "Ola Dahl"
date: "2025-01-04"
categories: [dynamic systems, network systems, discrete time, averaging]
image: "image.jpg"
---

# Network systems

I am reading the excellent book 
[Lectures on Network Systems](https://fbullo.github.io/lns){target="_blank"} by Francesco Bullo. 

My goal is to learn more about dynamic systems that are built up as networks, and also how one can control such systems.

## Averaging

In the first chapter of the book, there is a section where network systems that do averaging are described.

A network system can be described by an undirected graph. 

# A simple example

As our first example, we create a graph with two nodes, and one 
edge between them. The graph is shown, as

![](line.gv.png)

We can think of the networked system, represented by the graph above, as having two 
[state variables](https://en.wikipedia.org/wiki/State_variable){target="_blank"}, one for each node. 

We denote these state variables as $x_1$ and $x_2$.

An _averaging_ network system is a [dynamic system](https://en.wikipedia.org/wiki/Dynamical_system){target="_blank"} where the update of a state variable is done calculating
the average of the state variable itself, and all neighbouring state variables.

For our example, with two nodes and an edge between them, each node only has one neigbour (the other node of the network). The average is done
by averaging the two nodes.

Concentrating, as we will do in this blog post, on _discrete time_ dynamic systems, we compute, at each time instant, for each state variable, its _next_ value.

For the system shown in the figure above, using the averaging approach that we have described, the equations for such computations become

$$
\begin{aligned}
x_1(k+1) &= (x_1(k) + x_2(k))/2 \\
x_2(k+1) &= (x_2(k) + x_1(k))/2
\end{aligned}
$$
We say that the above computations describe how the state, represented by the variables $x_1$ and $x_2$ is _updated_. 

We can use a vector $x$, defined as
$$
x=
\begin{bmatrix}
x_1 & x_2
\end{bmatrix}^T
$$
and a matrix $A$, defined as
$$
A=
\begin{bmatrix}
1/2 & 1/2 \\
1/2 & 1/2
\end{bmatrix}
$$
to write the state update equations as 
$$
x(k+1) = Ax(k) \quad \quad \quad (1)
$$

## Analysis
Given an initial state $x(0)$, one might wonder what happens with $x(k)$ as the time $k$ increases?

For example, will $x$ converge to a specific value? And if this happens, what would the value be?

One could also wonder, if such a convergence happens, how long time (how many iterations) it would take?

## Simulation

We could answer our questions about what happens when time goes on, somewhat empirically, by making a _computer simulation_ of the dynamic system $(1)$.

We decide to use Python, with `numpy` and `matplotlib`.

A class, representing a dynamic system, can be created as

```python
class DynamicSystem:

    def __init__(self, A, x0):
        self.A = A
        n_rows, n_cols = A.shape
        assert n_rows == n_cols
        self.n = n_rows
        assert len(x0) == self.n
        self.x = x0

    def run(self, n_steps):
        # the result, as a matrix where each column represents x,
        # for the initial value and for the n_steps steps
        x_res = np.zeros([self.n, n_steps+1])
        x_res[:, [0]] = self.x
        for i in range(n_steps):
            nx = np.matmul(self.A, self.x)
            x_res[:, [i+1]] = nx
            self.x = nx
        return x_res
```

We can simulate this system, with an $A$ matrix as used above and with 
an initial $x$ chosen as
$$
x_0=
\begin{bmatrix}
1 & 2
\end{bmatrix}^T
$$
for five steps, by writing a function, as

```python
def line():
    A = np.array([[1/2, 1/2], [1/2, 1/2]])
    x0 = np.array([[1, 2]]).T
    d_sys = DynamicSystem(A, x0)
    x_res = d_sys.run(5)
    print(x_res)
```

Running this function gives a printout, as
```bash
python3 simulate.py
[[1.  1.5 1.5 1.5 1.5 1.5]
 [2.  1.5 1.5 1.5 1.5 1.5]]
```

where we see that each of the components in $x$ converge to the average
of the components of the initial value $x_0$.

We also see that the convergence takes only one step.

# A somewhat larger example

We can create a star graph, as done in exercise E1.5 in [the book](https://fbullo.github.io/lns){target="_blank"}. 

The graph is shown, as

![](star.gv.png)

We can simulate this graph, and plot the results of the simulation, using Python code, as

```python
def star(n_steps):
    A = np.array([[1/5, 1/5, 1/5, 1/5, 1/5],
                  [1/2, 1/2, 0, 0, 0],
                  [1/2, 0, 1/2, 0, 0],
                  [1/2, 0, 0, 1/2, 0],
                  [1/2, 0, 0, 0, 1/2]])
    x0 = np.array([[-2, -1, 0, 1, 2]]).T
    d_sys = DynamicSystem(A, x0)
    x_res = d_sys.run(n_steps)
    print(x_res[:, 0])
    print(x_res[:, -1])
    plt.plot(x_res.T)
    plt.savefig('star_plot.png')
```

The result of running this code with `n_steps=10` is shown, as

![](star_plot.png)

We see that the nodes seem to converge. The value that they converge to seem, however, to not be the same as the average
of their initial values, which is zero.

Simulating one hundred steps, and printing the initial and final values, we get

```bash
[-2. -1.  0.  1.  2.]
[-0.46153846 -0.46153846 -0.46153846 -0.46153846 -0.46153846]
```

We see that the end value seems to be the same for all nodes. 






